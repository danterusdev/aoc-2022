define Any1Array = Array(any_1);
define Any1ArrayArray = Array(Any1Array.Array);

define ARRAY_SIZE = 150;

define main = function(arguments: **, argument_count: whole_8) {
    variable input_file = *.>(+(arguments, 8));
    variable contents = read_file(input_file);

    variable allocator = BrkAllocator();

    variable array = Any1ArrayArray.new_allocate(&(allocator), ARRAY_SIZE);
    variable i = 0;
    while <(i, ARRAY_SIZE) {
        Any1ArrayArray.set(&(array), i, Any1Array.new_allocate(&(allocator), ARRAY_SIZE));
        i = +(i, 1);
    };

    variable lines = String.split_to_array(&(contents), ASCII.NEWLINE);

    variable actual_size = 0;

    variable i = 0;
    while <(i, StringArray.length(&(lines))) {
        variable line = StringArray.get(&(lines), i);
        variable j = 0;
        while <(j, String.length(&(line))) {
            variable character = String.get(&(line), j);

            variable sub_array = &(Any1ArrayArray.get(&(array), i));
            Any1Array.set(sub_array, j, -(character, ASCII.UPPERCASE.ZERO));

            actual_size = j;
            j = +(j, 1);
        };
        i = +(i, 1);
    };

    variable count = count_exposed(&(array), +(actual_size, 1));
    println_whole_8(count);
};

define count_exposed = function(array: *.Any1ArrayArray, actual_size: whole_8): whole_8 {
    variable count = 0;

    variable i = 0;
    while <(i, actual_size) {
        variable sub_array = &(Any1ArrayArray.get(array, i));
        variable j = 0;
        while <(j, actual_size) {
            if is_exposed(array, i, j, actual_size) {
                count = +(count, 1);
            };
            j = +(j, 1);
        };
        i = +(i, 1);
    };
    return count;
};

define get_value = function(array: *.Any1ArrayArray, row: whole_8, column: whole_8): any_1 {
    variable sub_array = &(Any1ArrayArray.get(array, row));
    return Any1Array.get(sub_array, column);
};

define is_exposed = function(array: *.Any1ArrayArray, row: whole_8, column: whole_8, actual_size: whole_8): boolean {
    variable size = get_value(array, row, column);

    variable blocked = false;
    variable j = 0;
    while <(j, column) {
        if !(<(get_value(array, row, j), get_value(array, row, column))) {
            blocked = true;
        };
        j = +(j, 1);
    };

    if !(blocked) {
        return true;
    };
    blocked = false;

    variable j = +(column, 1);
    while <(j, actual_size) {
        if !(<(get_value(array, row, j), get_value(array, row, column))) {
            blocked = true;
        };
        j = +(j, 1);
    };

    if !(blocked) {
        return true;
    };
    blocked = false;

    variable i = 0;
    while <(i, row) {
        if !(<(get_value(array, i, column), get_value(array, row, column))) {
            blocked = true;
        };
        i = +(i, 1);
    };

    if !(blocked) {
        return true;
    };
    blocked = false;

    variable i = +(row, 1);
    while <(i, actual_size) {
        if !(<(get_value(array, i, column), get_value(array, row, column))) {
            blocked = true;
        };
        i = +(i, 1);
    };

    return !(blocked);
};
