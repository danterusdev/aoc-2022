define read_file = function(file: *): String.String {
    variable fd = @syscall2(2, file, 0);
    variable stat: Stat;
    variable _ = @syscall2(5, fd, &(stat));

    variable allocated = brk_allocate(Stat.>size(&(stat)));
    variable _ = @syscall3(0, fd, allocated, Stat.>size(&(stat)));

    return String.new(allocated);
};

define Stat = structure {
    before: any_48;
    size: whole_8;
    after: any_88;
};

define brk_allocate = function(size: whole_8): * {
    variable brk = *.cast(@syscall1(12, 0));
    variable _ = @syscall1(12, +(brk, size));
    return brk;
};

define print = function(string: *) {
    variable _ = @syscall3(1, 1, string, string_length(string));
};

define get_character = function(pointer: *): any_1 {
    return any_1.>(any_1.*cast(pointer));
};

define string_length = function(string: *): whole_8 {
    variable length = 0;
    while !(=(get_character(+(string, length)), 0_whole_1)) {
        length = +(length, 1);
    };
    return length;
};

define ASCII = module {
    define NEWLINE: any_1 = 10;
    define ZERO: any_1 = 48;
};

define String = module {

    define String = structure {
        pointer: *;
        length: whole_8;
    };

    define new = function(pointer: *): String.String {
        return This.new_length(pointer, string_length(pointer));
    };

    define new_length = function(pointer: *, length: whole_8): String.String {
        variable string: String.String;
        This.String.<pointer(&(string), pointer);
        This.String.<length(&(string), length);
        return string;
    };

    define length = function(string: *This.String): whole_8 {
        return This.String.>length(string);
    };

    define println = function(string: *This.String) {
        variable _ = @syscall3(1, 1, This.String.>pointer(string), This.String.>length(string));
        variable new_line = 10;
        variable _ = @syscall3(1, 1, &(new_line), 1);
    };

    define get = function(string: *This.String, index: whole_8): any_1 {
        variable pointer = +(This.String.>pointer(string), index);
        return any_1.>(any_1.*cast(pointer));
    };

    define split_to_array = function(string: *This.String, split_character: whole_1): StringArray.Array {
        variable array = StringArray.new(brk_allocate(16384));

        variable pointer = This.String.>pointer(string);

        variable previous_location = 0;
        variable current_location = previous_location;
        variable current_line = 0;

        variable length = This.String.>length(string);
        while <(current_location, length) {
            if =(This.get(string, current_location), ASCII.NEWLINE) {
                variable string = String.new_length(+(pointer, previous_location), -(current_location, previous_location));
                StringArray.Array.<length(&(array), +(StringArray.Array.>length(&(array)), 1));
                StringArray.set(&(array), current_line, string);
                current_line = +(current_line, 1);
                previous_location = +(current_location, 1);
            };
            current_location = +(current_location, 1);
        };

        return array;
    };
    
};

define array_length = function(array: *, size: whole_8): whole_8 {
    variable length = 0;
    variable pointer = array;
    while !(=(any_8.>(any_8.*cast(pointer)), 0)) {
        pointer = +(pointer, size);
        length = +(length, 1);
    };
    return length;
};

define StringArray = Array(String.String);

define Array = macro(type) {
    module {
        define Array = structure {
            buffer: *;
            length: whole_8;
        };

        define new = function(pointer: *): This.Array {
            variable array = This.Array.>0();
            This.Array.<buffer(&(array), pointer);
            This.Array.<length(&(array), array_length(pointer, type.size()));
            return array;
        };

        define set = function(array: *This.Array, index: whole_8, value: type) {
            variable location = type.*cast(+(This.Array.>buffer(array), *(index, type.size())));
            type.<(location, value);
        };

        define get = function(array: *This.Array, index: whole_8): type {
            variable location = type.*cast(+(This.Array.>buffer(array), *(index, type.size())));
            return type.>(location);
        };

        define length = function(array: *This.Array): whole_8 {
            return This.Array.>length(array);
        };
    }
};

define print_whole_8 = function(whole_8: whole_8) {
    variable buffer = any_24.>0();
    whole_8_to_string(whole_8, &(buffer));
    print(&(buffer));
};

define whole_8_to_string = function(whole_8: whole_8, buffer: *) {
    variable whole_82 = whole_8;

    if =(whole_8, 0) {
        any_1.<(any_1.*cast(buffer), ASCII.ZERO);
    };

    variable length = 0;
    while !(=(whole_82, 0)) {
        whole_82 = /(whole_82, 10);
        length = +(length, 1);
    };

    whole_82 = whole_8;

    variable i = 0;
    while !(=(whole_82, 0)) {
        variable number = whole_8_to_whole_1(%(whole_82, 10));
        any_1.<(any_1.*cast(+(buffer, -(-(length, 1), i))), +(number, ASCII.ZERO));
        whole_82 = /(whole_82, 10);
        i = +(i, 1);
    };
};

define println_whole_8 = function(whole_8: whole_8) {
    print_whole_8(whole_8);
    variable new_line = 10;
    variable _ = @syscall3(1, 1, &(new_line), 1);
};

define whole_1_to_whole_8 = function(input: whole_1): whole_8 {
    variable output = whole_8.>0();
    whole_1.<(whole_1.*cast(&(output)), input);
    return output;
};

define whole_8_to_whole_1 = function(input: whole_8): whole_1 {
    return whole_1.>(whole_1.*cast(&(input)));
};
